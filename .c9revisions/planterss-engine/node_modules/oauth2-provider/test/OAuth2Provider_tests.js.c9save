{"ts":1369118727645,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var sinon = require('sinon'),\n  should = require('chai').should(),\n  serializer = require('serializer');\n\nvar module = require('../index');\n\ndescribe('OAuth2Provider', function(){\n\n  describe('login', function(){\n    beforeEach(function(){\n      var crypt_key = '123131',\n        sign_key = 'asdfasdfas';\n\n      // create parse stub that will be used to parse incoming requests\n      this.parseStub = sinon.stub();\n\n      // stub method to return object that has parseStub for parser\n      this.createSerializerStub = sinon.stub(serializer, 'createSecureSerializer');\n      this.createSerializerStub.withArgs(crypt_key, sign_key).returns({\n        parse : this.parseStub\n      });\n\n      this.oAuth2Provider = createOauth2Provider();\n    });\n    afterEach(function(){\n      this.createSerializerStub.restore();\n    });\n    var accessTokenKey = 'access_token';\n      // for backwards compatibility\n\n    it('should return function that emits access_token event with parsed user data if token can be parsed from request', function(){\n      // SETUP\n      var access_token = '123412341234124312341234';\n\n      var user_id = 'james',\n        client_id = '1231231',\n        dateString = '01/05/2012',\n        extra_data = 'wadfasdfasfasdfas';\n\n      // below data result from serialization\n      var expectedParsedData = [user_id, client_id, dateString, extra_data];\n      // setup serializer so that returns above data for that access token\n      this.parseStub.withArgs(access_token).returns(expectedParsedData);\n\n      this.oAuth2Provider.emit = sinon.spy();\n\n      // TEST\n      // build arguments that are passed to middleware function\n      var req = {\n        query : {\n          'access_token' : access_token  \n        }\n      },\n      nextFunction = function(){};\n      // get login middle ware function, and invoke it with above arguments\n      var middlewareFunction = this.oAuth2Provider.login();\n      middlewareFunction(req, {}, nextFunction);  \n\n      // SHOULD\n      // make sure emit was called with correct arguments\n      this.oAuth2Provider.emit.calledOnce.should.equal(true);\n      var callArgs = this.oAuth2Provider.emit.firstCall.args;\n      callArgs[0].should.eql('access_token');\n      callArgs[1].should.eql(req);\n      callArgs[2].should.eql({\n        user_id: user_id,\n        client_id: client_id,\n        extra_data: extra_data,\n        grant_date: new Date(dateString)\n      });\n      callArgs[3].should.equal(nextFunction);\n    });\n    it('should write error to response if cannot parse access token', function(){\n      // SETUP\n      var errorMessage = 'could not parse data',\n        access_token = '123412341234124312341234';\n      // change serializer to throw an error with the access token\n      this.parseStub.withArgs(access_token).throws({ message : errorMessage});\n\n      var req = {\n        query : {\n          'access_token' : access_token  \n        }\n      },\n      res = {\n        writeHead : sinon.spy(),\n        end : sinon.stub()\n      };\n\n      // TEST\n      // get login middleware function, and invoke it with above arguments\n      var middlewareFunction = this.oAuth2Provider.login();\n      middlewareFunction(req, res);  \n\n      // SHOULD\n      res.writeHead.calledWith(400).should.be.ok;\n      res.end.calledWith(errorMessage).should.be.ok;\n    });\n  });\n});\n\n\n\n// utility methods\nvar createOauth2Provider = function(crypt_key, sign_key){\n  var crypt_key = crypt_key || '123131',\n    sign_key = sign_key || 'asdfasdfas';\n\n  return new module.OAuth2Provider({crypt_key: crypt_key, sign_key: sign_key});\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":3554}]],"length":3554}
