{"ts":1369118764168,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// simple server with a protected resource at /secret secured by OAuth 2\n\nvar OAuth2Provider = require('../index').OAuth2Provider,\n           express = require('express'),\n       MemoryStore = express.session.MemoryStore;\n\n// hardcoded list of <client id, client secret> tuples\nvar myClients = {\n '1': '1secret',\n};\n\n// temporary grant storage\nvar myGrants = {};\n\nvar myOAP = new OAuth2Provider({crypt_key: 'encryption secret', sign_key: 'signing secret'});\n\n// before showing authorization page, make sure the user is logged in\nmyOAP.on('enforce_login', function(req, res, authorize_url, next) {\n  if(req.session.user) {\n    next(req.session.user);\n  } else {\n    res.writeHead(303, {Location: '/login?next=' + encodeURIComponent(authorize_url)});\n    res.end();\n  }\n});\n\n// render the authorize form with the submission URL\n// use two submit buttons named \"allow\" and \"deny\" for the user's choice\nmyOAP.on('authorize_form', function(req, res, client_id, authorize_url) {\n  res.end('<html>this app wants to access your account... <form method=\"post\" action=\"' + authorize_url + '\"><button name=\"allow\">Allow</button><button name=\"deny\">Deny</button></form>');\n});\n\n// save the generated grant code for the current user\nmyOAP.on('save_grant', function(req, client_id, code, next) {\n  if(!(req.session.user in myGrants))\n    myGrants[req.session.user] = {};\n\n  myGrants[req.session.user][client_id] = code;\n  next();\n});\n\n// remove the grant when the access token has been sent\nmyOAP.on('remove_grant', function(user_id, client_id, code) {\n  if(myGrants[user_id] && myGrants[user_id][client_id])\n    delete myGrants[user_id][client_id];\n});\n\n// find the user for a particular grant\nmyOAP.on('lookup_grant', function(client_id, client_secret, code, next) {\n  // verify that client id/secret pair are valid\n  if(client_id in myClients && myClients[client_id] == client_secret) {\n    for(var user in myGrants) {\n      var clients = myGrants[user];\n\n      if(clients[client_id] && clients[client_id] == code)\n        return next(null, user);\n    }\n  }\n\n  next(new Error('no such grant found'));\n});\n\n// embed an opaque value in the generated access token\nmyOAP.on('create_access_token', function(user_id, client_id, next) {\n  var data = 'blah'; // can be any data type or null\n\n  next(data);\n});\n\n// (optional) do something with the generated access token\nmyOAP.on('save_access_token', function(user_id, client_id, access_token) {\n  console.log('saving access token %s for user_id=%s client_id=%s', access_token, user_id, client_id);\n});\n\n// an access token was received in a URL query string parameter or HTTP header\nmyOAP.on('access_token', function(req, token, next) {\n  var TOKEN_TTL = 10 * 60 * 1000; // 10 minutes\n\n  if(token.grant_date.getTime() + TOKEN_TTL > Date.now()) {\n    req.session.user = token.user_id;\n    req.session.data = token.extra_data;\n  } else {\n    console.warn('access token for user %s has expired', token.user_id);\n  }\n\n  next();\n});\n\nfunction router(app) {\n  app.get('/', function(req, res, next) {\n    res.end('home, logged in? ' + !!req.session.user);\n  });\n\n  app.get('/login', function(req, res, next) {\n    if(req.session.user) {\n      res.writeHead(303, {Location: '/'});\n      return res.end();\n    }\n\n    var next_url = req.query.next ? req.query.next : '/';\n\n    res.end('<html><form method=\"post\" action=\"/login\"><input type=\"hidden\" name=\"next\" value=\"' + next_url + '\"><input type=\"text\" placeholder=\"username\" name=\"username\"><input type=\"password\" placeholder=\"password\" name=\"password\"><button type=\"submit\">Login</button></form>');\n  });\n\n  app.post('/login', function(req, res, next) {\n    req.session.user = req.body.username;\n\n    res.writeHead(303, {Location: req.body.next || '/'});\n    res.end();\n  });\n\n  app.get('/logout', function(req, res, next) {\n    req.session.destroy(function(err) {\n      res.writeHead(303, {Location: '/'});\n      res.end();\n    });\n  });\n\n  app.get('/secret', function(req, res, next) {\n    if(req.session.user) {\n      res.end('proceed to secret lair, extra data: ' + JSON.stringify(req.session.data));\n    } else {\n      res.writeHead(403);\n      res.end('no');\n    }\n  });\n}\n\nexpress.createServer(\n  express.logger(),\n  express.bodyParser(),\n  express.query(),\n  express.cookieParser(),\n  express.session({store: new MemoryStore({reapInterval: 5 * 60 * 1000}), secret: 'abracadabra'}),\n  myOAP.oauth(),\n  myOAP.login(),\n  express.router(router)\n).listen(8081);\n\nfunction escape_entities(s) {\n  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4552}]],"length":4552}
