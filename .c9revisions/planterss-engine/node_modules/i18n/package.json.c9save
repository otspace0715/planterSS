{"ts":1369473308212,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"{\n  \"name\": \"i18n\",\n  \"description\": \"lightweight simple translation module with dynamic json storage\",\n  \"version\": \"0.4.0\",\n  \"homepage\": \"http://github.com/mashpie/i18n-node\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/mashpie/i18n-node.git\"\n  },\n  \"author\": {\n    \"name\": \"Marcus Spiegel\",\n    \"email\": \"marcus.spiegel@gmail.com\"\n  },\n  \"main\": \"./index\",\n  \"keywords\": [\n    \"template\",\n    \"i18n\",\n    \"l10n\"\n  ],\n  \"directories\": {\n    \"lib\": \".\"\n  },\n  \"dependencies\": {\n    \"sprintf\": \">=0.1.1\",\n    \"debug\": \"*\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \">=1.8.1\",\n    \"should\": \">=1.2.1\"\n  },\n  \"engines\": {\n    \"node\": \">=0.4.0\"\n  },\n  \"scripts\": {\n    \"test\": \"make test\"\n  },\n  \"readme\": \"# i18n\\n\\nLightweight simple translation module with dynamic json storage. \\nUses common __('...') syntax in app and templates.\\nStores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format.\\nAdds new strings on-the-fly when first used in your app.\\nNo extra parsing needed.\\n\\n[![Build Status](https://secure.travis-ci.org/mashpie/i18n-node.png?branch=master)](http://travis-ci.org/mashpie/i18n-node)\\n\\n## Install\\n\\n\\tnpm install i18n\\n\\t\\n## Test \\n\\n\\tnpm test\\n\\n## Load\\n\\n\\t// load modules\\n\\tvar express = require('express'),\\n\\t    i18n = require(\\\"i18n\\\");\\n\\t\\nnow you are ready to use a global `i18n.__('Hello')`. **Global** assumes you share a common state of localization in any time and any part of your app. This is usually fine in cli-style scripts. When serving responses to http requests you'll need to make sure that scope is __NOT__ shared globally but attached to your request object.\\n\\n## Configure\\n\\nMinimal example, just setup two locales\\n\\n    i18n.configure({\\n        locales:['en', 'de']\\n    });\\n\\n### list of configuration options\\n\\n\\ti18n.configure({\\n\\t    // setup some locales - other locales default to en silently\\n\\t    locales:['en', 'de'],\\n\\n\\t    // you may alter a site wide default locale\\n\\t    defaultLocale: 'de',\\n\\n\\t    // sets a custom cookie name to parse locale settings from  - defaults to NULL\\n\\t    cookie: 'yourcookiename',\\n\\n\\t    // where to store json files - defaults to './locales'\\n\\t    directory: './mylocales',\\n\\n\\t    // whether to write new locale information to disk - defaults to true\\n\\t    updateFiles: false,\\n\\n\\t    // setting extension of json files - defaults to '.json' (you might want to set this to '.js' according to webtranslateit)\\n\\t    extension: '.js',\\n\\t});\\n\\n## Basic global use\\n\\nIn your app, when not registered to a specific object:\\n\\n\\tvar greeting = i18n.__('Hello');\\n\\n## Example usage in express.js\\n\\nIn an express app, you might use i18n.init to gather language settings of your visitors and also bind your helpers to response object honoring request objects locale, ie:\\n\\n\\t// Configuration\\n\\tapp.configure(function() {\\n\\n    \\t[...]\\n\\n\\t    // default: using 'accept-language' header to guess language settings\\n\\t    app.use(i18n.init);\\n\\n\\t    [...]\\n\\t});\\n\\nin your apps methods:\\n\\n\\tapp.get('/de', function(req, res){\\n      var greeting = res.__('Hello');\\n    });\\n\\n\\nin your templates (depending on your template engine)\\n\\t\\n\\t<%= __('Hello') %>\\n\\t\\n\\t${__('Hello')}\\n\\t\\n\\n## Obtionally manual attaching helpers for different template engines\\n\\nIn general i18n has to be attached to the response object to let it's public api get accessible in your templates and methods. As of **0.4.0** i18n tries to do so internally via `i18n.init`, as if you were doing it in `app.configure` on your own:\\n\\n\\tapp.use(function(req, res, next) {\\n\\t\\t// express helper for natively supported engines\\n\\t\\tres.locals.__ = res.__ = function() {\\n\\t\\t\\treturn i18n.__.apply(req, arguments);\\n\\t\\t};\\n\\n\\t\\t[...]\\n\\n\\t\\tnext();\\n\\t});\\n\\nDifferent engines need different implementations, so yours might miss or not work with the current default helpers. This one showing an example for mustache in express:\\n\\n\\t// register helper as a locals function wrapped as mustache expects\\n\\tapp.use(function (req, res, next) {\\n\\t\\t// mustache helper\\n\\t\\tres.locals.__ = function () {\\n\\t\\t  return function (text, render) {\\n\\t\\t    return i18n.__.apply(req, arguments);\\n\\t\\t  };\\n\\t\\t};\\t\\t\\n\\t\\t\\n\\t\\t[...]\\n\\n\\t\\tnext();\\n\\t});\\n\\nYou could still setup your own implementation. Please refer to Examples below, post an issue or contribute your setup.\\n\\n## Output parsing of expressions\\n\\nAs inspired by gettext there is currently support for sprintf-style expressions. Named parameters are on roadmap.\\n\\n### sprintf support\\n\\n\\tvar greeting = __('Hello %s, how are you today?', 'Marcus');\\n\\t\\nthis puts *Hello Marcus, how are you today?*. You might add endless arguments and even nest it.\\n\\n\\tvar greeting = __('Hello %s, how are you today? How was your %s.', 'Marcus', __('weekend'));\\n\\t\\nwhich puts *Hello Marcus, how are you today? How was your weekend.*\\n\\n### variable support\\n\\nyou might even use dynamic variables as they get interpreted on the fly. Better make sure no user input finds it's way to that point as they all get added to the `en.js` file if not yet existing.\\n\\n\\tvar greetings = ['Hi', 'Hello', 'Howdy'];        \\n    for (var i=0; i < greetings.length; i++) {\\n        console.log( __(greetings[i]) );\\n    };\\n\\nwhich puts \\n\\n\\tHi\\n\\tHello\\n\\tHowdy\\n\\n### basic plural support\\n\\ndifferent plural froms are supported as response to `count`:\\n\\n\\tvar singular = __n('%s cat', '%s cats', 1);\\n    var plural = __n('%s cat', '%s cats', 3);\\n\\nthis puts **1 cat** or **3 cats**\\nand again these could get nested:\\n\\n\\tvar singular = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\\n\\tvar plural = __n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\\n\\t\\nputting *There is one monkey in the tree* or *There are 3 monkeys in the tree*\\n\\n## Storage\\n\\nWill get modular support for different storage engines, currently just json files are stored in filesystem.\\n\\n### json file\\n\\nthe above will automatically generate a `en.json` by default inside `./locales/` which looks like\\n\\n\\t{\\n\\t\\t\\\"Hello\\\": \\\"Hello\\\",\\n\\t\\t\\\"Hello %s, how are you today?\\\": \\\"Hello %s, how are you today?\\\",\\n\\t\\t\\\"weekend\\\": \\\"weekend\\\",\\n\\t\\t\\\"Hello %s, how are you today? How was your %s.\\\": \\\"Hello %s, how are you today? How was your %s.\\\",\\n\\t\\t\\\"Hi\\\": \\\"Hi\\\",\\n\\t\\t\\\"Howdy\\\": \\\"Howdy\\\",\\n\\t\\t\\\"%s cat\\\": {\\n\\t\\t\\t\\\"one\\\": \\\"%s cat\\\",\\n\\t\\t\\t\\\"other\\\": \\\"%s cats\\\"\\n\\t\\t},\\n\\t\\t\\\"There is one monkey in the %%s\\\": {\\n\\t\\t\\t\\\"one\\\": \\\"There is one monkey in the %%s\\\",\\n\\t\\t\\t\\\"other\\\": \\\"There are %d monkeys in the %%s\\\"\\n\\t\\t},\\n\\t\\t\\\"tree\\\": \\\"tree\\\"\\n\\t}\\n\\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow:\\n\\n\\t{\\n\\t\\t\\\"Hello\\\": \\\"Hallo\\\",\\n\\t\\t\\\"Hello %s, how are you today?\\\": \\\"Hallo %s, wie geht es dir heute?\\\",\\n\\t\\t\\\"weekend\\\": \\\"Wochenende\\\",\\n\\t\\t\\\"Hello %s, how are you today? How was your %s.\\\": \\\"Hallo %s, wie geht es dir heute? Wie war dein %s.\\\",\\n\\t\\t\\\"Hi\\\": \\\"Hi\\\",\\n\\t\\t\\\"Howdy\\\": \\\"HallÃ¶chen\\\",\\n\\t\\t\\\"%s cat\\\": {\\n\\t\\t\\t\\\"one\\\": \\\"%s Katze\\\",\\n\\t\\t\\t\\\"other\\\": \\\"%s Katzen\\\"\\n\\t\\t},\\n\\t\\t\\\"There is one monkey in the %%s\\\": {\\n\\t\\t\\t\\\"one\\\": \\\"Im %%s sitzt ein Affe\\\",\\n\\t\\t\\t\\\"other\\\": \\\"Im Baum sitzen %d Affen\\\"\\n\\t\\t},\\n\\t\\t\\\"tree\\\": \\\"Baum\\\"\\n\\t}\\n\\n## Logging & Debugging\\n\\nLogging any kind of output is moved to [debug](https://github.com/visionmedia/debug) module. To let i18n output anything run your app with `DEBUG` env set like so:\\n\\n\\t$ DEBUG=i18n:* node app.js\\n\\ni18n exposes three log-levels:\\n\\n* i18n:debug\\n* i18n:warn\\n* i18n:error\\n\\nif you only want to get errors and warnings reported start your node server like so:\\n\\n\\t$ DEBUG=i18n:warn,i18n:error node app.js\\n\\nCombine those settings with you existing application if any of you other modules or libs also uses __debug__\\n\\n## Examples\\n\\n* [plain node.js + http](https://gist.github.com/mashpie/5188567)\\n* [express 3 + cookie](https://gist.github.com/mashpie/5124626)\\n* [express 3 + hbs 2 (+ cookie)](https://gist.github.com/mashpie/5246334)\\n* [express 3 + mustache (+ cookie)](https://gist.github.com/mashpie/5247373)\\n\\n\\n## Changelog\\n\\n* 0.4.0: stable release; closed: #22, #24, #4, #10, #54; added examples, clarified concurrency usage in different template engines, added `i18n.getCatalog`\\n* 0.3.9: express.js usage, named api, jscoverage + more test, refactored configure, closed: #51, #20, #16, #49\\n* 0.3.8: fixed: #44, #49; merged: #47, #45, #50; added: #33; updated: README\\n* 0.3.7: tests by mocha.js, added `this.locale` to `__` and `__n` \\n* 0.3.6: travisCI, writeFileSync, devDependencies, jslint, MIT, fixed: #29, #9, merged: #25, #30, #43\\n* 0.3.5: fixed some issues, prepared refactoring, prepared publishing to npm finally\\n* 0.3.4: merged pull request #13 from Fuitad/master and updated README\\n* 0.3.3: merged pull request from codders/master and modified for backward compatibility. Usage and tests pending\\n* 0.3.2: merged pull request #7 from carlptr/master and added tests, modified fswrite to do sync writes\\n* 0.3.0: added configure and init with express support (calling guessLanguage() via 'accept-language')\\n* 0.2.0: added plurals\\n* 0.1.0: added tests\\n* 0.0.1: start \\n\\n## Licensed under MIT\\n\\nCopyright (c) 2011-2013 Marcus Spiegel <marcus.spiegel@gmail.com>\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\n  \"_id\": \"i18n@0.4.0\",\n  \"dist\": {\n    \"shasum\": \"7edcef781438850766a97f531f433e6afb02ff51\"\n  },\n  \"_from\": \"i18n@latest\"\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":10651}]],"length":10651}
