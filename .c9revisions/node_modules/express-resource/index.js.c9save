{"ts":1369123030373,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Express - Resource\n * Copyright(c) 2010-2012 TJ Holowaychuk <tj@vision-media.ca>\n * Copyright(c) 2011 Daniel Gasienica <daniel@gasienica.ch>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar express = require('express')\n  , methods = require('methods')\n  , debug = require('debug')('express-resource')\n  , lingo = require('lingo')\n  , app = express.application\n  , en = lingo.en;\n\n/**\n * Pre-defined action ordering.\n */\n\nvar orderedActions = [\n   'index'    //  GET  /\n  , 'new'     //  GET  /new\n  , 'create'  //  POST /\n  , 'show'    //  GET  /:id\n  , 'edit'    //  GET  /edit/:id\n  , 'update'  //  PUT  /:id\n  , 'destroy' //  DEL  /:id\n];\n\n/**\n * Expose `Resource`.\n */\n\nmodule.exports = Resource;\n\n/**\n * Initialize a new `Resource` with the given `name` and `actions`.\n *\n * @param {String} name\n * @param {Object} actions\n * @param {Server} app\n * @api private\n */\n\nfunction Resource(name, actions, app) {\n  this.name = name;\n  this.app = app;\n  this.routes = {};\n  actions = actions || {};\n  this.base = actions.base || '/';\n  if ('/' != this.base[this.base.length - 1]) this.base += '/';\n  this.format = actions.format;\n  this.id = actions.id || this.defaultId;\n  this.param = ':' + this.id;\n\n  // default actions\n  for (var i = 0, key; i < orderedActions.length; ++i) {\n    key = orderedActions[i];\n    if (actions[key]) this.mapDefaultAction(key, actions[key]);\n  }\n\n  // auto-loader\n  if (actions.load) this.load(actions.load);\n};\n\n/**\n * Set the auto-load `fn`.\n *\n * @param {Function} fn\n * @return {Resource} for chaining\n * @api public\n */\n\nResource.prototype.load = function(fn){\n  var self = this\n    , id = this.id;\n\n  this.loadFunction = fn;\n  this.app.param(this.id, function(req, res, next){\n    function callback(err, obj){\n      if (err) return next(err);\n      // TODO: ideally we should next() passed the\n      // route handler\n      if (null == obj) return res.send(404);\n      req[id] = obj;\n      next();\n    };\n    \n    // Maintain backward compatibility\n    if (2 == fn.length) {\n      fn(req.params[id], callback);\n    } else {\n      fn(req, req.params[id], callback);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Retun this resource's default id string.\n *\n * @return {String}\n * @api private\n */\n\nResource.prototype.__defineGetter__('defaultId', function(){\n  return this.name\n    ? en.singularize(this.name.split('/').pop())\n    : 'id';\n});\n\n/**\n * Map http `method` and optional `path` to `fn`.\n *\n * @param {String} method\n * @param {String|Function|Object} path\n * @param {Function} fn\n * @return {Resource} for chaining\n * @api public\n */\n\nResource.prototype.map = function(method, path, fn){\n  var self = this\n    , orig = path;\n\n  if (method instanceof Resource) return this.add(method);\n  if ('function' == typeof path) fn = path, path = '';\n  if ('object' == typeof path) fn = path, path = '';\n  if ('/' == path[0]) path = path.substr(1);\n  else path = path ? this.param + '/' + path : this.param;\n  method = method.toLowerCase();\n\n  // setup route pathname\n  var route = this.base + (this.name || '');\n  if (this.name && path) route += '/';\n  route += path;\n  route += '.:format?';\n\n  // register the route so we may later remove it\n  (this.routes[method] = this.routes[method] || {})[route] = {\n      method: method\n    , path: route\n    , orig: orig\n    , fn: fn\n  };\n\n  // apply the route\n  this.app[method](route, function(req, res, next){\n    req.format = req.params.format || req.format || self.format;\n    if (req.format) res.type(req.format);\n    if ('object' == typeof fn) {\n      if (fn[req.format]) {\n        fn[req.format](req, res, next);\n      } else {\n        res.format(fn);\n      }\n    } else {\n      fn(req, res, next);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Nest the given `resource`.\n *\n * @param {Resource} resource\n * @return {Resource} for chaining\n * @see Resource#map()\n * @api public\n */\n\nResource.prototype.add = function(resource){\n  var app = this.app\n    , routes\n    , route;\n\n  // relative base\n  resource.base = this.base\n    + (this.name ? this.name + '/': '')\n    + this.param + '/';\n\n  // re-define previous actions\n  for (var method in resource.routes) {\n    routes = resource.routes[method];\n    for (var key in routes) {\n      route = routes[key];\n      delete routes[key];\n      if (method == 'del') method = 'delete';\n      app.routes[method].forEach(function(route, i){\n        if (route.path == key) {\n          app.routes[method].splice(i, 1);\n        }\n      })\n      resource.map(route.method, route.orig, route.fn);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Map the given action `name` with a callback `fn()`.\n *\n * @param {String} key\n * @param {Function} fn\n * @api private\n */\n\nResource.prototype.mapDefaultAction = function(key, fn){\n  switch (key) {\n    case 'index':\n      this.get('/', fn);\n      break;\n    case 'new':\n      this.get('/new', fn);\n      break;\n    case 'create':\n      this.post('/', fn);\n      break;\n    case 'show':\n      this.get(fn);\n      break;\n    case 'edit':\n      this.get('edit', fn);\n      break;\n    case 'update':\n      this.put(fn);\n      break;\n    case 'destroy':\n      this.del(fn);\n      break;\n  }\n};\n\n/**\n * Setup http verb methods.\n */\n\nmethods.concat(['del', 'all']).forEach(function(method){\n  Resource.prototype[method] = function(path, fn){\n    if ('function' == typeof path\n      || 'object' == typeof path) fn = path, path = '';\n    this.map(method, path, fn);\n    return this;\n  }\n});\n\n/**\n * Define a resource with the given `name` and `actions`.\n *\n * @param {String|Object} name or actions\n * @param {Object} actions\n * @return {Resource}\n * @api public\n */\n\napp.resource = function(name, actions, opts){\n  var options = actions || {};\n  if ('object' == typeof name) actions = name, name = null;\n  if (options.id) actions.id = options.id;\n  this.resources = this.resources || {};\n  if (!actions) return this.resources[name] || new Resource(name, null, this);\n  for (var key in opts) options[key] = opts[key];\n  var res = this.resources[name] = new Resource(name, actions, this);\n  return res;\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":6049}]],"length":6049}
