{"ts":1369127187214,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*!\n * Connect - session - MemoryStore\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Store = require('./store');\n\n/**\n * Initialize a new `MemoryStore`.\n *\n * @api public\n */\n\nvar MemoryStore = module.exports = function MemoryStore() {\n  this.sessions = {};\n};\n\n/**\n * Inherit from `Store.prototype`.\n */\n\nMemoryStore.prototype.__proto__ = Store.prototype;\n\n/**\n * Attempt to fetch session by the given `sid`.\n *\n * @param {String} sid\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.get = function(sid, fn){\n  var self = this;\n  process.nextTick(function(){\n    var expires\n      , sess = self.sessions[sid];\n    if (sess) {\n      sess = JSON.parse(sess);\n      expires = 'string' == typeof sess.cookie.expires\n        ? new Date(sess.cookie.expires)\n        : sess.cookie.expires;\n      if (!expires || new Date < expires) {\n        fn(null, sess);\n      } else {\n        self.destroy(sid, fn);\n      }\n    } else {\n      fn();\n    }\n  });\n};\n\n/**\n * Commit the given `sess` object associated with the given `sid`.\n *\n * @param {String} sid\n * @param {Session} sess\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.set = function(sid, sess, fn){\n  var self = this;\n  process.nextTick(function(){\n    self.sessions[sid] = JSON.stringify(sess);\n    fn && fn();\n  });\n};\n\n/**\n * Destroy the session associated with the given `sid`.\n *\n * @param {String} sid\n * @api public\n */\n\nMemoryStore.prototype.destroy = function(sid, fn){\n  var self = this;\n  process.nextTick(function(){\n    delete self.sessions[sid];\n    fn && fn();\n  });\n};\n\n/**\n * Invoke the given callback `fn` with all active sessions.\n *\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.all = function(fn){\n  var arr = []\n    , keys = Object.keys(this.sessions);\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    arr.push(this.sessions[keys[i]]);\n  }\n  fn(null, arr);\n};\n\n/**\n * Clear all sessions.\n *\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.clear = function(fn){\n  this.sessions = {};\n  fn && fn();\n};\n\n/**\n * Fetch number of sessions.\n *\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.length = function(fn){\n  fn(null, Object.keys(this.sessions).length);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2310}]],"length":2310}
